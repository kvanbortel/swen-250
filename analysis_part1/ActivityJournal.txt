SWEN-250 Document Analysis Journal

Implement these functions in the order below.

Your name: Kayla Van Bortel

================================================================
create_node
Start
Estimated Time	00:10
Plan:
(Order of implementation, testing approach, etc.)
* Insert what we did in class and make any necessary changes

Complete
Actual Time	00:05
Observations:
(Lessons learned, problems encountered, obstacles overcome, etc.)
* Use strlen() in malloc

================================================================
valid_parameters
Start
Estimated Time	00:02
Plan:
(Order of implementation, testing approach, etc.)
* Create an if statement

Complete
Actual Time	00:01
Observations:
(Lessons learned, problems encountered, obstacles overcome, etc.)
* Remember to de-reference the pointer when checking for empty string

================================================================

add_node_at_head
Start
Estimated Time	00:10
Plan:
(Order of implementation, testing approach, etc.)
* Test for valid parameters first
* Go down the list and implement one at a time

Complete
Actual Time	00:10
Observations:
(Lessons learned, problems encountered, obstacles overcome, etc.)
* Check for NULL pointer before trying to dereference it


================================================================
clear_linked_list
Start
Estimated Time	00:10
Plan:
(Order of implementation, testing approach, etc.)
* Carefully loop through the linked list
* Update every element

Complete
Actual Time	00:20
Observations:
(Lessons learned, problems encountered, obstacles overcome, etc.)
* You can chain '->'
* Don't have to make a temporary struct node


================================================================
add_node_after_current
Start
Estimated Time	00:10
Plan:
(Order of implementation, testing approach, etc.)
* Draw out what I'm doing
* Account for empty list and inserting at head and tail
* Account for all the pointers

Complete
Actual Time	00:25
Observations:
(Lessons learned, problems encountered, obstacles overcome, etc.)
* Work on one case at a time to get it working
* Pay attention to when pointers are reassigned
* Make it neater once it's working

================================================================
get_current_word
Start
Estimated Time	00:02
Plan:
(Order of implementation, testing approach, etc.)
* Return NULL or the pointer to the word

Complete
Actual Time	00:01
Observations:
(Lessons learned, problems encountered, obstacles overcome, etc.)
* I referred to the struct to see that the pointer was "unique_word"


================================================================
get_previous_word and get_next_word
Start
Estimated Time	HH MM
Plan:
(Order of implementation, testing approach, etc.)

Complete
Actual Time	HH MM
Observations:
(Lessons learned, problems encountered, obstacles overcome, etc.)


================================================================
find_word
Start
Estimated Time	HH MM
Plan:
(Order of implementation, testing approach, etc.)

Complete
Actual Time	HH MM
Observations:
(Lessons learned, problems encountered, obstacles overcome, etc.)


================================================================
